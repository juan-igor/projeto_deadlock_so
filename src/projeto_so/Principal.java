/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package projeto_so;

import static java.lang.Float.parseFloat;
import static java.lang.Integer.parseInt;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.concurrent.Semaphore;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.NumberFormatter;

/**
 *
 * @author Juan Igor
 */
public class Principal extends javax.swing.JFrame {
    
    public static Map<String, int[]> resources;
    public static int resources_qtt;
    public static long SOinterval;
    public static ArrayList<Semaphore> resourceSemaphores;
    public static ArrayList<String> resourceNames;
    public static ArrayList<Processo> processes = new ArrayList<>();
    public static ArrayList<int[]> processesUtilizing = new ArrayList<>();
    public static ArrayList<int[]> processesRequests = new ArrayList<>();
    public static int[] resourcesInstancies;

    public static Semaphore MUTEX = new Semaphore(1);
    
    private static DefaultTableModel tableModel;
    private SistemaOperacional SO;
    private ArrayList<Integer> IDs;
    private int processQtt = 0;
    private boolean tableCreated = false;
    private final DefaultFormatterFactory mask_int = new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("#0")));
    private final DefaultFormatterFactory mask_float = new DefaultFormatterFactory(new NumberFormatter(new DecimalFormat("#0.00")));
    
    /**
     * Creates new form JFrame_Principal
     */
    public Principal() {
        initComponents();
        new SmartScroller(jSP_Log);
        new SmartScroller(jSP_DLlog);
        
        
        setSystem();
        
        jtaLog.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 13));
        jtaLog.setText("--> Programa inciado com sucesso!" + "\n");
        jtaLog.setText(jtaLog.getText()+"--> Crie algum processo para rodar a simulação!\n");
        
        jtaDLlog.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 13));
        jtaDLlog.setText("--> Sistema Operacional Inciado!" + "\n");
        jtaDLlog.setText(jtaDLlog.getText()+"--> Checagem de DeadLock's a cada: "+(SOinterval/1000)+"s \n");
        
        this.setLocationRelativeTo(null);
        this.setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jP_buttons = new javax.swing.JPanel();
        criar_processo_btn = new javax.swing.JButton();
        excluir_processo_btn = new javax.swing.JButton();
        sair_btn = new javax.swing.JButton();
        jP_Log = new javax.swing.JPanel();
        jSP_Log = new javax.swing.JScrollPane();
        jtaLog = new javax.swing.JTextArea();
        jP_processes = new javax.swing.JPanel();
        jSP_processes = new javax.swing.JScrollPane();
        jT_processes = new javax.swing.JTable();
        jP_DLlog = new javax.swing.JPanel();
        jSP_DLlog = new javax.swing.JScrollPane();
        jtaDLlog = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Projeto Sistema Operacional");

        jP_buttons.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Menu", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        criar_processo_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto_so/images/add2_32x32.png"))); // NOI18N
        criar_processo_btn.setText("Criar Processo");
        criar_processo_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criar_processo_btnActionPerformed(evt);
            }
        });

        excluir_processo_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto_so/images/del2_32x32.png"))); // NOI18N
        excluir_processo_btn.setText("Excluir Processo");
        excluir_processo_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                excluir_processo_btnActionPerformed(evt);
            }
        });

        sair_btn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto_so/images/exit_32x32.png"))); // NOI18N
        sair_btn.setText("Sair do Programa");
        sair_btn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sair_btnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jP_buttonsLayout = new javax.swing.GroupLayout(jP_buttons);
        jP_buttons.setLayout(jP_buttonsLayout);
        jP_buttonsLayout.setHorizontalGroup(
            jP_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(criar_processo_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 97, Short.MAX_VALUE)
                .addComponent(excluir_processo_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 98, Short.MAX_VALUE)
                .addComponent(sair_btn, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jP_buttonsLayout.setVerticalGroup(
            jP_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jP_buttonsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jP_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(sair_btn, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jP_buttonsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(criar_processo_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(excluir_processo_btn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(1, 1, 1))
        );

        jP_Log.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log de Eventos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jtaLog.setColumns(20);
        jtaLog.setLineWrap(true);
        jtaLog.setRows(5);
        jtaLog.setFocusable(false);
        jtaLog.setRequestFocusEnabled(false);
        jSP_Log.setViewportView(jtaLog);

        javax.swing.GroupLayout jP_LogLayout = new javax.swing.GroupLayout(jP_Log);
        jP_Log.setLayout(jP_LogLayout);
        jP_LogLayout.setHorizontalGroup(
            jP_LogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSP_Log)
        );
        jP_LogLayout.setVerticalGroup(
            jP_LogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSP_Log)
        );

        jP_processes.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Lista de Processos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jT_processes.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 13)); // NOI18N
        jT_processes.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Status", "Recursos em utilização", "Esperando recursos"
            }
        ));
        jT_processes.setEnabled(false);
        jT_processes.setRowMargin(2);
        jSP_processes.setViewportView(jT_processes);

        javax.swing.GroupLayout jP_processesLayout = new javax.swing.GroupLayout(jP_processes);
        jP_processes.setLayout(jP_processesLayout);
        jP_processesLayout.setHorizontalGroup(
            jP_processesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_processesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jSP_processes)
                .addContainerGap())
        );
        jP_processesLayout.setVerticalGroup(
            jP_processesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jP_processesLayout.createSequentialGroup()
                .addComponent(jSP_processes, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );

        jP_DLlog.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Log do S.O. (DeadLock's)", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.BELOW_TOP));

        jtaDLlog.setColumns(20);
        jtaDLlog.setLineWrap(true);
        jtaDLlog.setRows(5);
        jtaDLlog.setFocusable(false);
        jtaDLlog.setRequestFocusEnabled(false);
        jSP_DLlog.setViewportView(jtaDLlog);

        javax.swing.GroupLayout jP_DLlogLayout = new javax.swing.GroupLayout(jP_DLlog);
        jP_DLlog.setLayout(jP_DLlogLayout);
        jP_DLlogLayout.setHorizontalGroup(
            jP_DLlogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSP_DLlog)
        );
        jP_DLlogLayout.setVerticalGroup(
            jP_DLlogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSP_DLlog)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jP_processes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jP_buttons, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jP_Log, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jP_DLlog, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jP_buttons, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jP_processes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jP_Log, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jP_DLlog, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sair_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sair_btnActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(null, "Programa Encerrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        System.exit(0);
    }//GEN-LAST:event_sair_btnActionPerformed

    private void excluir_processo_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_excluir_processo_btnActionPerformed
        // TODO add your handling code here:
        excluir_processo();
    }//GEN-LAST:event_excluir_processo_btnActionPerformed

    private void criar_processo_btnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criar_processo_btnActionPerformed
        // TODO add your handling code here:
        if(processQtt+1 > 15){
            JOptionPane.showMessageDialog(null, "Não é possível criar outro processo.\nA quantidade máxima de processos é de 15.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
        }
        else{
            criar_processo();
        }
    }//GEN-LAST:event_criar_processo_btnActionPerformed
    
    //<editor-fold defaultstate="collapsed" desc=" Set Resources and S.O. Interval ">
    private void setResourcesQtt(){
        boolean loop = true;
        boolean exit = false;
        JFormattedTextField jtf_qtd = new JFormattedTextField();
        jtf_qtd.setFormatterFactory(mask_int);
        Object[] msg = {
            "Digite a quantidade de tipos de recursos que o sistema terá:", jtf_qtd
        };
        while(loop){
            int result = JOptionPane.showConfirmDialog(null, msg, "Atenção!", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            jtf_qtd.requestFocus();
            if(result == JOptionPane.OK_OPTION){
                if(jtf_qtd.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Erro! É Necessário digitar a quantidade de recursos!!\nDigite novamente...", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }
                if(parseInt(jtf_qtd.getText()) > 10){
                    JOptionPane.showMessageDialog(null, "Erro! A máxima quantidade de tipos de recurso é 10!!\nDigite novamente...", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    resources_qtt = parseInt(jtf_qtd.getText());
                    resourcesInstancies = new int[resources_qtt];
                    loop = false;
                }
            }
            else{
                loop = false;
                exit = true;
            }
        }
        if(exit){
            JOptionPane.showMessageDialog(null, "Programa Encerrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        }
    }
    
    private void setResources(){
        resources = new HashMap<>();
        
        for(int i=0; i<resources_qtt; i++){
            boolean loop = true;
            boolean exit = false;
            JFormattedTextField jtf_rName = new JFormattedTextField();
            JFormattedTextField jtf_rQtt = new JFormattedTextField();
            jtf_rQtt.setFormatterFactory(mask_int);
            Object[] msg = {
                "Recurso ID:"+(i+1),
                "Digite o nome do recurso:", jtf_rName,
                "Digite a quantidade de instâncias do recurso:", jtf_rQtt
            };
            while(loop){
                int result = JOptionPane.showConfirmDialog(null, msg, "Atenção!", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
                if(result == JOptionPane.OK_OPTION){
                    if(jtf_rName.getText().isEmpty()){
                        JOptionPane.showMessageDialog(null, "Erro! É necessário digitar o nome do recurso!!\nDigite novamente...", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }
                    if(jtf_rQtt.getText().isEmpty()){
                        JOptionPane.showMessageDialog(null, "Erro! É necessário digitar a quantidade de instâncias do recurso!!\nDigite novamente...", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }
                    else{
                        int arr[] = {(i+1), parseInt(jtf_rQtt.getText())};
                        resources.put(jtf_rName.getText(), arr);
                        resourcesInstancies[i] = parseInt(jtf_rQtt.getText());
                        loop = false;
                    }
                }
                else{
                    loop = false;
                    exit = true;
                }
            }
            if(exit){
                JOptionPane.showMessageDialog(null, "Programa Encerrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                System.exit(0);
            }
        }
    }
    
    private void setSOinterval(){
        boolean loop = true;
        boolean exit = false;
        JFormattedTextField jtf_qtd = new JFormattedTextField();
        jtf_qtd.setFormatterFactory(mask_int);
        Object[] msg = {
            "Digite o tempo de checagem de DeadLock para o S.O em segundos:", jtf_qtd
        };
        while(loop){
            int result = JOptionPane.showConfirmDialog(null, msg, "Atenção!", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            jtf_qtd.requestFocus();
            if(result == JOptionPane.OK_OPTION){
                if(jtf_qtd.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Erro! É Necessário digitar o tempo de espera do S.O!!\nDigite novamente...", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    if(!jtf_qtd.getText().contains(",")){
                        SOinterval = (long) (parseFloat(jtf_qtd.getText())*1000);
                    }
                    else{
                        SOinterval = (long) (parseFloat(jtf_qtd.getText().replace(',', '.'))*1000);
                    }
                    loop = false;
                }
            }
            else{
                loop = false;
                exit = true;
            }
        }
        if(exit){
            JOptionPane.showMessageDialog(null, "Programa Encerrado", "Atenção", JOptionPane.INFORMATION_MESSAGE);
            System.exit(0);
        }
    }
    //</editor-fold>
    
    private void setSystem(){
        
        setSOinterval();
        setResourcesQtt();
        setResources();
        setColumnStyle();
        
        resourceSemaphores = new ArrayList<>();
        resourceNames = new ArrayList<>();
        for(int i=0; i<resources_qtt; i++){
            resourceSemaphores.add(null);
            resourceNames.add(null);
        }
        
        for(Map.Entry<String, int[]> entry : resources.entrySet()){
            Semaphore temp = new Semaphore(entry.getValue()[1]);
            int index = entry.getValue()[0];
            resourceSemaphores.set(index-1, temp);
            resourceNames.set(index-1, entry.getKey());
        }
        
        SO = new SistemaOperacional();
        SO.start();
        
    }
    
    private void logAddProcess(int pID, float Ts, float Tu){
        jtaLog.setText(jtaLog.getText() + "┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑\n");
        jtaLog.setText(jtaLog.getText() + "→→> Processo ID: "+pID+" criado\n");
        jtaLog.setText(jtaLog.getText() + "\t└→> Tempo de solicitação: "+Ts+"s\n");
        jtaLog.setText(jtaLog.getText() + "\t└→> Tempo de utilização: "+Tu+"s\n");
        jtaLog.setText(jtaLog.getText() + "┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙\n");
    }
    
    private void logRemoveProcess(int pID){
        jtaLog.setText(jtaLog.getText() + "┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑\n");
        jtaLog.setText(jtaLog.getText() + "--> Processo ID:"+pID+" excluido." + "\n");
        jtaLog.setText(jtaLog.getText() + "┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙\n");
    }
    
    public static void logAdd(int pID, String message){
        jtaLog.setText(jtaLog.getText() + "┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑\n");
        jtaLog.setText(jtaLog.getText() + "→→> Processo ID: "+pID+"\n");
        jtaLog.setText(jtaLog.getText() + "\t└→> "+message+"\n");
        jtaLog.setText(jtaLog.getText() + "┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙\n");
    }
    
    public static void DL_logAdd(String message){
        jtaDLlog.setText(jtaDLlog.getText() + "┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑\n");
        jtaDLlog.setText(jtaDLlog.getText() + "→→> DeadLock detectado entre os processos de ID:\n");
        jtaDLlog.setText(jtaDLlog.getText() + "\t└→> "+message+"\n");
        jtaDLlog.setText(jtaDLlog.getText() + "┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙\n");
    }
    
    public static void NoDL_logAdd(){
        jtaDLlog.setText(jtaDLlog.getText() + "┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑\n");
        jtaDLlog.setText(jtaDLlog.getText() + "→→> Sistema Checado!\n");
        jtaDLlog.setText(jtaDLlog.getText() + "\t└→> Nenhum DeadLock detectado.\n");
        jtaDLlog.setText(jtaDLlog.getText() + "┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙\n");
    }
    
    //<editor-fold defaultstate="collapsed" desc=" Processes Table aux. functions ">
    private static int getRowIndex(int pID){
        String searchedID = ""+pID;
        
        for(int i=0;i<tableModel.getRowCount();++i)
            if(tableModel.getValueAt(i, 0).equals(searchedID))
            {
                return i;
            }
        
        return -1;
    }
    
    private void centerColumnText(){
        DefaultTableCellRenderer cellRender = new DefaultTableCellRenderer();
        cellRender.setHorizontalAlignment(SwingConstants.CENTER);

        for (int numCol = 0; numCol < jT_processes.getColumnCount(); numCol++) {
            jT_processes.getColumnModel().getColumn(numCol).setCellRenderer(cellRender);
        }
    }
    
    private void setColumnStyle(){
        TableColumnModel tcm = jT_processes.getColumnModel();
        
        tcm.getColumn(0).setMaxWidth(35);
        tcm.getColumn(1).setMaxWidth(160);
        tcm.getColumn(1).setPreferredWidth(160);
        tcm.getColumn(3).setMaxWidth(160);
        tcm.getColumn(3).setPreferredWidth(160);
    }
    //</editor-fold>
    
    private void addProcessInTable(int pID){     
        if(!tableCreated){
            String[] columns = {
                "ID do Processo",
                "Status",
                "Recursos em utilização",
                "Solicitando recursos"
            };
            
            Object[][] row = {
                {
                    ""+pID,         //ProcessID
                    "Instanciado",  //Status
                    "Nenhum",       //Utilização de recursos
                    "Nenhum"       //Solicitando recursos
                }
            };
            
            tableModel = new DefaultTableModel(row, columns);
            jT_processes.setModel(tableModel);
            
            centerColumnText();
            setColumnStyle();
            
            tableCreated = true;
        }
        else{
            Object[] row = {
                ""+pID,         //ProcessID
                "Instanciado",  //Status
                "Nenhum",       //Utilização de recursos
                "Nenhum"       //Solicitando recursos
            };
            
            tableModel.addRow(row);
        }
    }
    
    private void removeProcessInTable(int pID){
        tableModel.removeRow(getRowIndex(pID));
    }
    
    public static void setProcessInTable(int pID, String status, String uResources, String sResources){
        tableModel.setValueAt(status, getRowIndex(pID), 1);
        tableModel.setValueAt(uResources, getRowIndex(pID), 2);
        tableModel.setValueAt(sResources, getRowIndex(pID), 3);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {;
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Principal();
            }
        });
    }
    
    private void criar_processo(){
        int processID = processQtt+1;
        boolean modify = false;
        
        if(!processes.isEmpty()){
            for(int i=0; i<processes.size(); i++){
                if(processes.get(i) == null){
                    processID = i+1;
                    modify = true;
                    break;
                }
            }
        }
        
        // <editor-fold defaultstate="collapsed" desc=" Código JPanel Criar Processo ">
        JPanel panel_cProcess = new javax.swing.JPanel();
        JLabel label_img = new javax.swing.JLabel();
        JLabel label_msg = new javax.swing.JLabel();
        JLabel label_id = new javax.swing.JLabel();
        JFormattedTextField jftf_id = new javax.swing.JFormattedTextField();
        JLabel label_interval1 = new javax.swing.JLabel();
        JFormattedTextField jftf_interval1 = new javax.swing.JFormattedTextField();
        JLabel label_interval2 = new javax.swing.JLabel();
        JFormattedTextField jftf_interval2 = new javax.swing.JFormattedTextField();

        label_img.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto_so/images/add_64x64.png"))); // NOI18N

        label_msg.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        label_msg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_msg.setText("Criar Processo");

        label_id.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_id.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_id.setLabelFor(jftf_id);
        label_id.setText("ID :");

        jftf_id.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jftf_id.setEnabled(false);
        jftf_id.setText("Processo ID: "+processID);

        label_interval1.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_interval1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_interval1.setLabelFor(jftf_interval1);
        label_interval1.setText("<html><body style=\"text-align:center\">Intervalo de solicitação :<br>de recursos (s)</body></html>");

        jftf_interval1.setFormatterFactory(mask_int);
        jftf_interval1.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        label_interval2.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        label_interval2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_interval2.setLabelFor(jftf_interval2);
        label_interval2.setText("<html><body style=\"text-align:center\">Intervalo de utilização :<br>de recursos (s)</body></html>");

        jftf_interval2.setFormatterFactory(mask_int);
        jftf_interval2.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout panel_cProcessLayout = new javax.swing.GroupLayout(panel_cProcess);
        panel_cProcess.setLayout(panel_cProcessLayout);
        panel_cProcessLayout.setHorizontalGroup(
            panel_cProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_cProcessLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_cProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_msg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panel_cProcessLayout.createSequentialGroup()
                        .addComponent(label_id)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jftf_id))
                    .addComponent(label_img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(panel_cProcessLayout.createSequentialGroup()
                        .addComponent(label_interval1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jftf_interval1))
                    .addGroup(panel_cProcessLayout.createSequentialGroup()
                        .addComponent(label_interval2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jftf_interval2, javax.swing.GroupLayout.DEFAULT_SIZE, 162, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_cProcessLayout.setVerticalGroup(
            panel_cProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_cProcessLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_img)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_msg)
                .addGap(18, 18, 18)
                .addGroup(panel_cProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_id)
                    .addComponent(jftf_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel_cProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_interval1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftf_interval1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(panel_cProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(label_interval2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jftf_interval2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        // </editor-fold>
        
        boolean inLoop = true;
        while(inLoop){
            int result = JOptionPane.showConfirmDialog(null, panel_cProcess, "Criar Processo", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
            if(result == JOptionPane.OK_OPTION){
                if(jftf_interval1.getText().isEmpty() && jftf_interval2.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Erro! Nenhum campo preenchido.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }
                else if(jftf_interval1.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Erro! Campo 'Intervalo de Solicitação' não preenchido.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }
                else if(jftf_interval2.getText().isEmpty()){
                    JOptionPane.showMessageDialog(null, "Erro! Campo 'Intervalo de Utilização' não preenchido.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                }
                else{
                    int ts = parseInt(jftf_interval1.getText());
                    int tu = parseInt(jftf_interval2.getText());
                    
                    if(ts <= 0 || tu <= 0){
                        JOptionPane.showMessageDialog(null, "Erro! Nenhum campo pode ser preenchido com o valor 0 ou menor.", "Atenção", JOptionPane.INFORMATION_MESSAGE);
                    }
                    else{
                        processQtt++;
                        
                        Processo temp_process = new Processo(processID, ts, tu);
                        int[] resources = new int[resources_qtt];
                        
                        logAddProcess(processID, ts, tu);
                        addProcessInTable(processID);
                        
                        if(modify){
                            processes.set(processID-1, temp_process);
                            processesUtilizing.set(processID-1, resources);
                            processesRequests.set(processID-1, resources);
                        }
                        else{
                            processes.add(temp_process);
                            processesUtilizing.add(resources);
                            processesRequests.add(resources);
                        }
                        
                        temp_process.start();
                        inLoop = false;
                    }
                }
            }
            else{ inLoop = false; }
        }
    }
    
    private void excluir_processo(){
        
        setIDs();
        
        DefaultComboBoxModel jcb_idList = new DefaultComboBoxModel(new String[] { "Nenhum processo criado" });
        
        if(!processes.isEmpty()){
            jcb_idList.removeAllElements();
            for(int i=0; i<processes.size(); i++){
                if(processes.get(i) != null){
                    jcb_idList.addElement("Processo ID: "+(i+1));
                }
            }
        }
        
        //<editor-fold defaultstate="collapsed" desc=" Código JPanel Excluir Processo ">
        JPanel panel_dProcess = new javax.swing.JPanel();
        JLabel label_img = new javax.swing.JLabel();
        JLabel label_msg = new javax.swing.JLabel();
        JComboBox jcb_id = new javax.swing.JComboBox();

        label_img.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_img.setIcon(new javax.swing.ImageIcon(getClass().getResource("/projeto_so/images/delete_64x64.png"))); // NOI18N

        label_msg.setFont(new java.awt.Font("Trebuchet MS", 0, 16)); // NOI18N
        label_msg.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_msg.setText("Excluir Processo");

        jcb_id.setFont(new java.awt.Font("Trebuchet MS", 0, 14)); // NOI18N
        jcb_id.setModel(jcb_idList);
        jcb_id.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        if(processes.isEmpty()) jcb_id.setEnabled(false);

        javax.swing.GroupLayout panel_dProcessLayout = new javax.swing.GroupLayout(panel_dProcess);
        panel_dProcess.setLayout(panel_dProcessLayout);
        panel_dProcessLayout.setHorizontalGroup(
            panel_dProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_dProcessLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_dProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(label_msg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(label_img, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcb_id, javax.swing.GroupLayout.Alignment.TRAILING, 0, 192, Short.MAX_VALUE))
                .addContainerGap())
        );
        panel_dProcessLayout.setVerticalGroup(
            panel_dProcessLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_dProcessLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(label_img)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(label_msg)
                .addGap(18, 18, 18)
                .addComponent(jcb_id, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        //</editor-fold>
        
        int result = JOptionPane.showConfirmDialog(null, panel_dProcess, "Exluir Usuário", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);
        if(result == JOptionPane.OK_OPTION){
            int id = IDs.get(jcb_id.getSelectedIndex());
            boolean retorno = false;
            
            processes.get(id).excluir_processo();
            processes.set(id, null);
            processesRequests.set(id, null);
            processesUtilizing.set(id, null);
            
            if(--processQtt == 0){
                processes.clear();
                processesRequests.clear();
                processesUtilizing.clear();
            }
            
            logRemoveProcess(id+1);
            removeProcessInTable(id+1);
        }
    }
    
    private void setIDs(){
        IDs = new ArrayList<>();
        for(int i=0; i<processes.size(); i++){
            if(processes.get(i) != null){
                IDs.add(i);
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton criar_processo_btn;
    private javax.swing.JButton excluir_processo_btn;
    private javax.swing.JPanel jP_DLlog;
    private javax.swing.JPanel jP_Log;
    private javax.swing.JPanel jP_buttons;
    private javax.swing.JPanel jP_processes;
    private javax.swing.JScrollPane jSP_DLlog;
    private javax.swing.JScrollPane jSP_Log;
    private javax.swing.JScrollPane jSP_processes;
    private javax.swing.JTable jT_processes;
    private static javax.swing.JTextArea jtaDLlog;
    private static javax.swing.JTextArea jtaLog;
    private javax.swing.JButton sair_btn;
    // End of variables declaration//GEN-END:variables
}
